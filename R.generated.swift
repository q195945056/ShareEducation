//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `AutoEquatable.stencil`.
    static let autoEquatableStencil = Rswift.FileResource(bundle: R.hostingBundle, name: "AutoEquatable", pathExtension: "stencil")
    /// Resource file `AutoMappable.stencil`.
    static let autoMappableStencil = Rswift.FileResource(bundle: R.hostingBundle, name: "AutoMappable", pathExtension: "stencil")
    /// Resource file `city.plist`.
    static let cityPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "city", pathExtension: "plist")
    /// Resource file `config.sourcery.yml`.
    static let configSourceryYml = Rswift.FileResource(bundle: R.hostingBundle, name: "config.sourcery", pathExtension: "yml")
    /// Resource file `province.plist`.
    static let provincePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "province", pathExtension: "plist")

    /// `bundle.url(forResource: "AutoEquatable", withExtension: "stencil")`
    static func autoEquatableStencil(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.autoEquatableStencil
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AutoMappable", withExtension: "stencil")`
    static func autoMappableStencil(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.autoMappableStencil
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "city", withExtension: "plist")`
    static func cityPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cityPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "config.sourcery", withExtension: "yml")`
    static func configSourceryYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configSourceryYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "province", withExtension: "plist")`
    static func provincePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.provincePlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 104 images.
  struct image {
    /// Image `bg_class2`.
    static let bg_class2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_class2")
    /// Image `bg_class`.
    static let bg_class = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_class")
    /// Image `bg_coupon01`.
    static let bg_coupon01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_coupon01")
    /// Image `bg_coupon02`.
    static let bg_coupon02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_coupon02")
    /// Image `bg_coupon3`.
    static let bg_coupon3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_coupon3")
    /// Image `bg_my`.
    static let bg_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my")
    /// Image `bg_myinfo2`.
    static let bg_myinfo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_myinfo2")
    /// Image `bg_myinfo`.
    static let bg_myinfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_myinfo")
    /// Image `button01`.
    static let button01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button01")
    /// Image `button02`.
    static let button02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button02")
    /// Image `button_01`.
    static let button_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_01")
    /// Image `button_see2`.
    static let button_see2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_see2")
    /// Image `button_see3`.
    static let button_see3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_see3")
    /// Image `button_see`.
    static let button_see = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_see")
    /// Image `head_student_man`.
    static let head_student_man = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_student_man")
    /// Image `head_student_woman`.
    static let head_student_woman = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_student_woman")
    /// Image `head_teacher_man`.
    static let head_teacher_man = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_teacher_man")
    /// Image `head_teacher_woman`.
    static let head_teacher_woman = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_teacher_woman")
    /// Image `icon_back2`.
    static let icon_back2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back2")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `icon_class08`.
    static let icon_class08 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_class08")
    /// Image `icon_clock2`.
    static let icon_clock2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_clock2")
    /// Image `icon_clock`.
    static let icon_clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_clock")
    /// Image `icon_close2`.
    static let icon_close2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close2")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_date_left`.
    static let icon_date_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_date_left")
    /// Image `icon_date_right`.
    static let icon_date_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_date_right")
    /// Image `icon_grade2`.
    static let icon_grade2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_grade2")
    /// Image `icon_grade`.
    static let icon_grade = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_grade")
    /// Image `icon_guanzhu2`.
    static let icon_guanzhu2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guanzhu2")
    /// Image `icon_guanzhu`.
    static let icon_guanzhu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guanzhu")
    /// Image `icon_history`.
    static let icon_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_history")
    /// Image `icon_love`.
    static let icon_love = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_love")
    /// Image `icon_loved`.
    static let icon_loved = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_loved")
    /// Image `icon_map`.
    static let icon_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_map")
    /// Image `icon_menu001`.
    static let icon_menu001 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu001")
    /// Image `icon_menu002`.
    static let icon_menu002 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu002")
    /// Image `icon_menu003`.
    static let icon_menu003 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu003")
    /// Image `icon_menu004`.
    static let icon_menu004 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu004")
    /// Image `icon_menu01`.
    static let icon_menu01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu01")
    /// Image `icon_menu02`.
    static let icon_menu02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu02")
    /// Image `icon_menu03`.
    static let icon_menu03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu03")
    /// Image `icon_menu04`.
    static let icon_menu04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu04")
    /// Image `icon_more_home`.
    static let icon_more_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_home")
    /// Image `icon_more_my`.
    static let icon_more_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_my")
    /// Image `icon_my01`.
    static let icon_my01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my01")
    /// Image `icon_my02`.
    static let icon_my02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my02")
    /// Image `icon_my03`.
    static let icon_my03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my03")
    /// Image `icon_my04`.
    static let icon_my04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my04")
    /// Image `icon_my05`.
    static let icon_my05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my05")
    /// Image `icon_my_setting`.
    static let icon_my_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my_setting")
    /// Image `icon_myclass`.
    static let icon_myclass = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_myclass")
    /// Image `icon_mytecher`.
    static let icon_mytecher = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mytecher")
    /// Image `icon_paixu2`.
    static let icon_paixu2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_paixu2")
    /// Image `icon_paixu3`.
    static let icon_paixu3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_paixu3")
    /// Image `icon_paixu`.
    static let icon_paixu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_paixu")
    /// Image `icon_pay1`.
    static let icon_pay1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pay1")
    /// Image `icon_pay2`.
    static let icon_pay2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pay2")
    /// Image `icon_pay3`.
    static let icon_pay3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pay3")
    /// Image `icon_play2`.
    static let icon_play2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play2")
    /// Image `icon_play`.
    static let icon_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play")
    /// Image `icon_renzheng`.
    static let icon_renzheng = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_renzheng")
    /// Image `icon_search_class`.
    static let icon_search_class = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_class")
    /// Image `icon_search`.
    static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `icon_sel2`.
    static let icon_sel2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sel2")
    /// Image `icon_sel`.
    static let icon_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sel")
    /// Image `icon_share01`.
    static let icon_share01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share01")
    /// Image `icon_share02`.
    static let icon_share02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share02")
    /// Image `icon_share03`.
    static let icon_share03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share03")
    /// Image `icon_share2`.
    static let icon_share2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share2")
    /// Image `icon_share3`.
    static let icon_share3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share3")
    /// Image `icon_share`.
    static let icon_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share")
    /// Image `icon_signsel2`.
    static let icon_signsel2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_signsel2")
    /// Image `icon_signsel`.
    static let icon_signsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_signsel")
    /// Image `icon_small2`.
    static let icon_small2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_small2")
    /// Image `icon_small`.
    static let icon_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_small")
    /// Image `icon_sun`.
    static let icon_sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sun")
    /// Image `icon_teacher`.
    static let icon_teacher = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_teacher")
    /// Image `icon_tui2`.
    static let icon_tui2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tui2")
    /// Image `icon_tui`.
    static let icon_tui = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tui")
    /// Image `icon_volume`.
    static let icon_volume = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume")
    /// Image `icon_yuan`.
    static let icon_yuan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_yuan")
    /// Image `img_my`.
    static let img_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_my")
    /// Image `img_search`.
    static let img_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_search")
    /// Image `logo_my`.
    static let logo_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_my")
    /// Image `logo_sign`.
    static let logo_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_sign")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `start1`.
    static let start1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start1")
    /// Image `start2`.
    static let start2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start2")
    /// Image `start3`.
    static let start3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start3")
    /// Image `start4`.
    static let start4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start4")
    /// Image `start5`.
    static let start5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start5")
    /// Image `start_big0`.
    static let start_big0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_big0")
    /// Image `start_big1`.
    static let start_big1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_big1")
    /// Image `start_big2`.
    static let start_big2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_big2")
    /// Image `start_big3`.
    static let start_big3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_big3")
    /// Image `start_big4`.
    static let start_big4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_big4")
    /// Image `start_big5`.
    static let start_big5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_big5")
    /// Image `tag_NO1`.
    static let tag_NO1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_NO1")
    /// Image `tag_NO2`.
    static let tag_NO2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_NO2")
    /// Image `tag_NO3`.
    static let tag_NO3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_NO3")
    /// Image `tag_class`.
    static let tag_class = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_class")
    /// Image `tag_student`.
    static let tag_student = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_student")
    /// Image `tag_techer`.
    static let tag_techer = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_techer")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_class", bundle: ..., traitCollection: ...)`
    static func bg_class(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_class, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_class2", bundle: ..., traitCollection: ...)`
    static func bg_class2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_class2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_coupon01", bundle: ..., traitCollection: ...)`
    static func bg_coupon01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_coupon01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_coupon02", bundle: ..., traitCollection: ...)`
    static func bg_coupon02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_coupon02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_coupon3", bundle: ..., traitCollection: ...)`
    static func bg_coupon3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_coupon3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my", bundle: ..., traitCollection: ...)`
    static func bg_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_myinfo", bundle: ..., traitCollection: ...)`
    static func bg_myinfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_myinfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_myinfo2", bundle: ..., traitCollection: ...)`
    static func bg_myinfo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_myinfo2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button01", bundle: ..., traitCollection: ...)`
    static func button01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button02", bundle: ..., traitCollection: ...)`
    static func button02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_01", bundle: ..., traitCollection: ...)`
    static func button_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_see", bundle: ..., traitCollection: ...)`
    static func button_see(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_see, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_see2", bundle: ..., traitCollection: ...)`
    static func button_see2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_see2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_see3", bundle: ..., traitCollection: ...)`
    static func button_see3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_see3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head_student_man", bundle: ..., traitCollection: ...)`
    static func head_student_man(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_student_man, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head_student_woman", bundle: ..., traitCollection: ...)`
    static func head_student_woman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_student_woman, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head_teacher_man", bundle: ..., traitCollection: ...)`
    static func head_teacher_man(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_teacher_man, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head_teacher_woman", bundle: ..., traitCollection: ...)`
    static func head_teacher_woman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_teacher_woman, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back2", bundle: ..., traitCollection: ...)`
    static func icon_back2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_class08", bundle: ..., traitCollection: ...)`
    static func icon_class08(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_class08, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_clock", bundle: ..., traitCollection: ...)`
    static func icon_clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_clock2", bundle: ..., traitCollection: ...)`
    static func icon_clock2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_clock2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close2", bundle: ..., traitCollection: ...)`
    static func icon_close2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_date_left", bundle: ..., traitCollection: ...)`
    static func icon_date_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_date_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_date_right", bundle: ..., traitCollection: ...)`
    static func icon_date_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_date_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_grade", bundle: ..., traitCollection: ...)`
    static func icon_grade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_grade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_grade2", bundle: ..., traitCollection: ...)`
    static func icon_grade2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_grade2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guanzhu", bundle: ..., traitCollection: ...)`
    static func icon_guanzhu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guanzhu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guanzhu2", bundle: ..., traitCollection: ...)`
    static func icon_guanzhu2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guanzhu2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_history", bundle: ..., traitCollection: ...)`
    static func icon_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_love", bundle: ..., traitCollection: ...)`
    static func icon_love(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_love, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_loved", bundle: ..., traitCollection: ...)`
    static func icon_loved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_loved, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_map", bundle: ..., traitCollection: ...)`
    static func icon_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu001", bundle: ..., traitCollection: ...)`
    static func icon_menu001(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu001, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu002", bundle: ..., traitCollection: ...)`
    static func icon_menu002(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu002, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu003", bundle: ..., traitCollection: ...)`
    static func icon_menu003(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu003, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu004", bundle: ..., traitCollection: ...)`
    static func icon_menu004(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu004, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu01", bundle: ..., traitCollection: ...)`
    static func icon_menu01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu02", bundle: ..., traitCollection: ...)`
    static func icon_menu02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu03", bundle: ..., traitCollection: ...)`
    static func icon_menu03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu04", bundle: ..., traitCollection: ...)`
    static func icon_menu04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_home", bundle: ..., traitCollection: ...)`
    static func icon_more_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_my", bundle: ..., traitCollection: ...)`
    static func icon_more_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_my, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_my01", bundle: ..., traitCollection: ...)`
    static func icon_my01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_my02", bundle: ..., traitCollection: ...)`
    static func icon_my02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_my03", bundle: ..., traitCollection: ...)`
    static func icon_my03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_my04", bundle: ..., traitCollection: ...)`
    static func icon_my04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_my05", bundle: ..., traitCollection: ...)`
    static func icon_my05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_my_setting", bundle: ..., traitCollection: ...)`
    static func icon_my_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_myclass", bundle: ..., traitCollection: ...)`
    static func icon_myclass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_myclass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mytecher", bundle: ..., traitCollection: ...)`
    static func icon_mytecher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mytecher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_paixu", bundle: ..., traitCollection: ...)`
    static func icon_paixu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_paixu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_paixu2", bundle: ..., traitCollection: ...)`
    static func icon_paixu2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_paixu2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_paixu3", bundle: ..., traitCollection: ...)`
    static func icon_paixu3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_paixu3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pay1", bundle: ..., traitCollection: ...)`
    static func icon_pay1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pay1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pay2", bundle: ..., traitCollection: ...)`
    static func icon_pay2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pay2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pay3", bundle: ..., traitCollection: ...)`
    static func icon_pay3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pay3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_play", bundle: ..., traitCollection: ...)`
    static func icon_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_play2", bundle: ..., traitCollection: ...)`
    static func icon_play2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_renzheng", bundle: ..., traitCollection: ...)`
    static func icon_renzheng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_renzheng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_class", bundle: ..., traitCollection: ...)`
    static func icon_search_class(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_class, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_sel", bundle: ..., traitCollection: ...)`
    static func icon_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_sel2", bundle: ..., traitCollection: ...)`
    static func icon_sel2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sel2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share", bundle: ..., traitCollection: ...)`
    static func icon_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share01", bundle: ..., traitCollection: ...)`
    static func icon_share01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share02", bundle: ..., traitCollection: ...)`
    static func icon_share02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share03", bundle: ..., traitCollection: ...)`
    static func icon_share03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share2", bundle: ..., traitCollection: ...)`
    static func icon_share2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share3", bundle: ..., traitCollection: ...)`
    static func icon_share3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_signsel", bundle: ..., traitCollection: ...)`
    static func icon_signsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_signsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_signsel2", bundle: ..., traitCollection: ...)`
    static func icon_signsel2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_signsel2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_small", bundle: ..., traitCollection: ...)`
    static func icon_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_small2", bundle: ..., traitCollection: ...)`
    static func icon_small2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_small2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_sun", bundle: ..., traitCollection: ...)`
    static func icon_sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_teacher", bundle: ..., traitCollection: ...)`
    static func icon_teacher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_teacher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tui", bundle: ..., traitCollection: ...)`
    static func icon_tui(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tui, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tui2", bundle: ..., traitCollection: ...)`
    static func icon_tui2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tui2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume", bundle: ..., traitCollection: ...)`
    static func icon_volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_yuan", bundle: ..., traitCollection: ...)`
    static func icon_yuan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_yuan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_my", bundle: ..., traitCollection: ...)`
    static func img_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_my, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_search", bundle: ..., traitCollection: ...)`
    static func img_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_my", bundle: ..., traitCollection: ...)`
    static func logo_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_my, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_sign", bundle: ..., traitCollection: ...)`
    static func logo_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_sign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start1", bundle: ..., traitCollection: ...)`
    static func start1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start2", bundle: ..., traitCollection: ...)`
    static func start2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start3", bundle: ..., traitCollection: ...)`
    static func start3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start4", bundle: ..., traitCollection: ...)`
    static func start4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start5", bundle: ..., traitCollection: ...)`
    static func start5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_big0", bundle: ..., traitCollection: ...)`
    static func start_big0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_big0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_big1", bundle: ..., traitCollection: ...)`
    static func start_big1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_big1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_big2", bundle: ..., traitCollection: ...)`
    static func start_big2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_big2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_big3", bundle: ..., traitCollection: ...)`
    static func start_big3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_big3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_big4", bundle: ..., traitCollection: ...)`
    static func start_big4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_big4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_big5", bundle: ..., traitCollection: ...)`
    static func start_big5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_big5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag_NO1", bundle: ..., traitCollection: ...)`
    static func tag_NO1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_NO1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag_NO2", bundle: ..., traitCollection: ...)`
    static func tag_NO2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_NO2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag_NO3", bundle: ..., traitCollection: ...)`
    static func tag_NO3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_NO3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag_class", bundle: ..., traitCollection: ...)`
    static func tag_class(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_class, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag_student", bundle: ..., traitCollection: ...)`
    static func tag_student(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_student, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag_techer", bundle: ..., traitCollection: ...)`
    static func tag_techer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_techer, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 46 nibs.
  struct nib {
    /// Nib `AboutViewController`.
    static let aboutViewController = _R.nib._AboutViewController()
    /// Nib `AccountSafeViewController`.
    static let accountSafeViewController = _R.nib._AccountSafeViewController()
    /// Nib `ActivityCell`.
    static let activityCell = _R.nib._ActivityCell()
    /// Nib `ActivityListViewController`.
    static let activityListViewController = _R.nib._ActivityListViewController()
    /// Nib `AreaSettingViewController`.
    static let areaSettingViewController = _R.nib._AreaSettingViewController()
    /// Nib `CommentViewController`.
    static let commentViewController = _R.nib._CommentViewController()
    /// Nib `CouponCell`.
    static let couponCell = _R.nib._CouponCell()
    /// Nib `CouponListViewController`.
    static let couponListViewController = _R.nib._CouponListViewController()
    /// Nib `CourseDetailCoverCell`.
    static let courseDetailCoverCell = _R.nib._CourseDetailCoverCell()
    /// Nib `CourseDetailDescptionCell`.
    static let courseDetailDescptionCell = _R.nib._CourseDetailDescptionCell()
    /// Nib `CourseDetailTeacherCell`.
    static let courseDetailTeacherCell = _R.nib._CourseDetailTeacherCell()
    /// Nib `CourseDetailUnitCell`.
    static let courseDetailUnitCell = _R.nib._CourseDetailUnitCell()
    /// Nib `CourseDetailUnitDescriptionCell`.
    static let courseDetailUnitDescriptionCell = _R.nib._CourseDetailUnitDescriptionCell()
    /// Nib `CourseDetailViewController`.
    static let courseDetailViewController = _R.nib._CourseDetailViewController()
    /// Nib `CoursePlayViewController`.
    static let coursePlayViewController = _R.nib._CoursePlayViewController()
    /// Nib `CourseSbscribeAlertViewController`.
    static let courseSbscribeAlertViewController = _R.nib._CourseSbscribeAlertViewController()
    /// Nib `CourseUnitViewController`.
    static let courseUnitViewController = _R.nib._CourseUnitViewController()
    /// Nib `CustomerServiceViewController`.
    static let customerServiceViewController = _R.nib._CustomerServiceViewController()
    /// Nib `EditUserinfoViewController`.
    static let editUserinfoViewController = _R.nib._EditUserinfoViewController()
    /// Nib `FeedbackViewController`.
    static let feedbackViewController = _R.nib._FeedbackViewController()
    /// Nib `FindPwdViewController`.
    static let findPwdViewController = _R.nib._FindPwdViewController()
    /// Nib `MessageCell`.
    static let messageCell = _R.nib._MessageCell()
    /// Nib `MessageListViewController`.
    static let messageListViewController = _R.nib._MessageListViewController()
    /// Nib `MineTableCell`.
    static let mineTableCell = _R.nib._MineTableCell()
    /// Nib `MyCollectionViewController`.
    static let myCollectionViewController = _R.nib._MyCollectionViewController()
    /// Nib `PaymentCouponCell`.
    static let paymentCouponCell = _R.nib._PaymentCouponCell()
    /// Nib `PaymentPayTypeCell`.
    static let paymentPayTypeCell = _R.nib._PaymentPayTypeCell()
    /// Nib `PaymentPriceDetailCell`.
    static let paymentPriceDetailCell = _R.nib._PaymentPriceDetailCell()
    /// Nib `PaymentViewController`.
    static let paymentViewController = _R.nib._PaymentViewController()
    /// Nib `PlayerViewController`.
    static let playerViewController = _R.nib._PlayerViewController()
    /// Nib `QuestionCell`.
    static let questionCell = _R.nib._QuestionCell()
    /// Nib `RegisterViewController`.
    static let registerViewController = _R.nib._RegisterViewController()
    /// Nib `SearchHeaderView`.
    static let searchHeaderView = _R.nib._SearchHeaderView()
    /// Nib `SearchHotCell`.
    static let searchHotCell = _R.nib._SearchHotCell()
    /// Nib `SearchViewController`.
    static let searchViewController = _R.nib._SearchViewController()
    /// Nib `SelectCourseViewController`.
    static let selectCourseViewController = _R.nib._SelectCourseViewController()
    /// Nib `SettingCell`.
    static let settingCell = _R.nib._SettingCell()
    /// Nib `SettingViewController`.
    static let settingViewController = _R.nib._SettingViewController()
    /// Nib `TeacherContentViewController`.
    static let teacherContentViewController = _R.nib._TeacherContentViewController()
    /// Nib `TeacherDetailCommentCell`.
    static let teacherDetailCommentCell = _R.nib._TeacherDetailCommentCell()
    /// Nib `TeacherDetailDescriptionCell`.
    static let teacherDetailDescriptionCell = _R.nib._TeacherDetailDescriptionCell()
    /// Nib `TeacherDetailInfoCell`.
    static let teacherDetailInfoCell = _R.nib._TeacherDetailInfoCell()
    /// Nib `TeacherDetailSegmentedCell`.
    static let teacherDetailSegmentedCell = _R.nib._TeacherDetailSegmentedCell()
    /// Nib `TeacherHomeCell`.
    static let teacherHomeCell = _R.nib._TeacherHomeCell()
    /// Nib `UserInfoCell`.
    static let userInfoCell = _R.nib._UserInfoCell()
    /// Nib `ValidateCodeLoginViewController`.
    static let validateCodeLoginViewController = _R.nib._ValidateCodeLoginViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutViewController) instead")
    static func aboutViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountSafeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountSafeViewController) instead")
    static func accountSafeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountSafeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activityCell) instead")
    static func activityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivityListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activityListViewController) instead")
    static func activityListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AreaSettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.areaSettingViewController) instead")
    static func areaSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.areaSettingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentViewController) instead")
    static func commentViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CouponCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponCell) instead")
    static func couponCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CouponListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponListViewController) instead")
    static func couponListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseDetailCoverCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDetailCoverCell) instead")
    static func courseDetailCoverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDetailCoverCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseDetailDescptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDetailDescptionCell) instead")
    static func courseDetailDescptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDetailDescptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseDetailTeacherCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDetailTeacherCell) instead")
    static func courseDetailTeacherCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDetailTeacherCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseDetailUnitCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDetailUnitCell) instead")
    static func courseDetailUnitCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDetailUnitCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseDetailUnitDescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDetailUnitDescriptionCell) instead")
    static func courseDetailUnitDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDetailUnitDescriptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDetailViewController) instead")
    static func courseDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CoursePlayViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coursePlayViewController) instead")
    static func coursePlayViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coursePlayViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseSbscribeAlertViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseSbscribeAlertViewController) instead")
    static func courseSbscribeAlertViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseSbscribeAlertViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseUnitViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseUnitViewController) instead")
    static func courseUnitViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseUnitViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomerServiceViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customerServiceViewController) instead")
    static func customerServiceViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customerServiceViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditUserinfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editUserinfoViewController) instead")
    static func editUserinfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editUserinfoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FeedbackViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.feedbackViewController) instead")
    static func feedbackViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feedbackViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FindPwdViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.findPwdViewController) instead")
    static func findPwdViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.findPwdViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messageCell) instead")
    static func messageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessageListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messageListViewController) instead")
    static func messageListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MineTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mineTableCell) instead")
    static func mineTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyCollectionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCollectionViewController) instead")
    static func myCollectionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCollectionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentCouponCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentCouponCell) instead")
    static func paymentCouponCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentCouponCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentPayTypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentPayTypeCell) instead")
    static func paymentPayTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentPayTypeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentPriceDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentPriceDetailCell) instead")
    static func paymentPriceDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentPriceDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentViewController) instead")
    static func paymentViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playerViewController) instead")
    static func playerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionCell) instead")
    static func questionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerViewController) instead")
    static func registerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHeaderView) instead")
    static func searchHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchHotCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHotCell) instead")
    static func searchHotCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHotCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchViewController) instead")
    static func searchViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectCourseViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectCourseViewController) instead")
    static func selectCourseViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectCourseViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingCell) instead")
    static func settingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingViewController) instead")
    static func settingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeacherContentViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teacherContentViewController) instead")
    static func teacherContentViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teacherContentViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeacherDetailCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teacherDetailCommentCell) instead")
    static func teacherDetailCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teacherDetailCommentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeacherDetailDescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teacherDetailDescriptionCell) instead")
    static func teacherDetailDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teacherDetailDescriptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeacherDetailInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teacherDetailInfoCell) instead")
    static func teacherDetailInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teacherDetailInfoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeacherDetailSegmentedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teacherDetailSegmentedCell) instead")
    static func teacherDetailSegmentedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teacherDetailSegmentedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeacherHomeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teacherHomeCell) instead")
    static func teacherHomeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teacherHomeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userInfoCell) instead")
    static func userInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userInfoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ValidateCodeLoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.validateCodeLoginViewController) instead")
    static func validateCodeLoginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.validateCodeLoginViewController)
    }
    #endif

    static func aboutViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.aboutViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountSafeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountSafeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func activityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityCell? {
      return R.nib.activityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityCell
    }

    static func activityListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.activityListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func areaSettingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.areaSettingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func commentViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.commentViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func couponCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponCell? {
      return R.nib.couponCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponCell
    }

    static func couponListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.couponListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func courseDetailCoverCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailCoverCell? {
      return R.nib.courseDetailCoverCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailCoverCell
    }

    static func courseDetailDescptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailDescptionCell? {
      return R.nib.courseDetailDescptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailDescptionCell
    }

    static func courseDetailTeacherCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailTeacherCell? {
      return R.nib.courseDetailTeacherCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailTeacherCell
    }

    static func courseDetailUnitCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailUnitCell? {
      return R.nib.courseDetailUnitCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailUnitCell
    }

    static func courseDetailUnitDescriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailUnitDescriptionCell? {
      return R.nib.courseDetailUnitDescriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailUnitDescriptionCell
    }

    static func courseDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.courseDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func coursePlayViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.coursePlayViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func courseSbscribeAlertViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.courseSbscribeAlertViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func courseUnitViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.courseUnitViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customerServiceViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customerServiceViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func editUserinfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editUserinfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func feedbackViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.feedbackViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func findPwdViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.findPwdViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func messageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessageCell? {
      return R.nib.messageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageCell
    }

    static func messageListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.messageListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mineTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTableCell? {
      return R.nib.mineTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTableCell
    }

    static func myCollectionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myCollectionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paymentCouponCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentCouponCell? {
      return R.nib.paymentCouponCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentCouponCell
    }

    static func paymentPayTypeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentPayTypeCell? {
      return R.nib.paymentPayTypeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentPayTypeCell
    }

    static func paymentPriceDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentPriceDetailCell? {
      return R.nib.paymentPriceDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentPriceDetailCell
    }

    static func paymentViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paymentViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func playerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.playerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func questionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCell? {
      return R.nib.questionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCell
    }

    static func registerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.registerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHeaderView? {
      return R.nib.searchHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHeaderView
    }

    static func searchHotCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHotCell? {
      return R.nib.searchHotCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHotCell
    }

    static func searchViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func selectCourseViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.selectCourseViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func settingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingCell? {
      return R.nib.settingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCell
    }

    static func settingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func teacherContentViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.teacherContentViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func teacherDetailCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailCommentCell? {
      return R.nib.teacherDetailCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailCommentCell
    }

    static func teacherDetailDescriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailDescriptionCell? {
      return R.nib.teacherDetailDescriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailDescriptionCell
    }

    static func teacherDetailInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailInfoCell? {
      return R.nib.teacherDetailInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailInfoCell
    }

    static func teacherDetailSegmentedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailSegmentedCell? {
      return R.nib.teacherDetailSegmentedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailSegmentedCell
    }

    static func teacherHomeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherHomeCell? {
      return R.nib.teacherHomeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherHomeCell
    }

    static func userInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoCell? {
      return R.nib.userInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoCell
    }

    static func validateCodeLoginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.validateCodeLoginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 24 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ActivityCell`.
    static let activityCell: Rswift.ReuseIdentifier<ActivityCell> = Rswift.ReuseIdentifier(identifier: "ActivityCell")
    /// Reuse identifier `CouponCell`.
    static let couponCell: Rswift.ReuseIdentifier<CouponCell> = Rswift.ReuseIdentifier(identifier: "CouponCell")
    /// Reuse identifier `CourseDetailCoverCell`.
    static let courseDetailCoverCell: Rswift.ReuseIdentifier<CourseDetailCoverCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailCoverCell")
    /// Reuse identifier `CourseDetailDescptionCell`.
    static let courseDetailDescptionCell: Rswift.ReuseIdentifier<CourseDetailDescptionCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailDescptionCell")
    /// Reuse identifier `CourseDetailTeacherCell`.
    static let courseDetailTeacherCell: Rswift.ReuseIdentifier<CourseDetailTeacherCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailTeacherCell")
    /// Reuse identifier `CourseDetailUnitCell`.
    static let courseDetailUnitCell: Rswift.ReuseIdentifier<CourseDetailUnitCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailUnitCell")
    /// Reuse identifier `CourseDetailUnitDescriptionCell`.
    static let courseDetailUnitDescriptionCell: Rswift.ReuseIdentifier<CourseDetailUnitDescriptionCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailUnitDescriptionCell")
    /// Reuse identifier `HomeTeacherCollectionCell`.
    static let homeTeacherCollectionCell: Rswift.ReuseIdentifier<HomeTeacherCollectionCell> = Rswift.ReuseIdentifier(identifier: "HomeTeacherCollectionCell")
    /// Reuse identifier `HomeTeacherTableCell`.
    static let homeTeacherTableCell: Rswift.ReuseIdentifier<HomeTeacherTableCell> = Rswift.ReuseIdentifier(identifier: "HomeTeacherTableCell")
    /// Reuse identifier `MessageCell`.
    static let messageCell: Rswift.ReuseIdentifier<MessageCell> = Rswift.ReuseIdentifier(identifier: "MessageCell")
    /// Reuse identifier `MineTableCell`.
    static let mineTableCell: Rswift.ReuseIdentifier<MineTableCell> = Rswift.ReuseIdentifier(identifier: "MineTableCell")
    /// Reuse identifier `PaymentCouponCell`.
    static let paymentCouponCell: Rswift.ReuseIdentifier<PaymentCouponCell> = Rswift.ReuseIdentifier(identifier: "PaymentCouponCell")
    /// Reuse identifier `PaymentPayTypeCell`.
    static let paymentPayTypeCell: Rswift.ReuseIdentifier<PaymentPayTypeCell> = Rswift.ReuseIdentifier(identifier: "PaymentPayTypeCell")
    /// Reuse identifier `PaymentPriceDetailCell`.
    static let paymentPriceDetailCell: Rswift.ReuseIdentifier<PaymentPriceDetailCell> = Rswift.ReuseIdentifier(identifier: "PaymentPriceDetailCell")
    /// Reuse identifier `QuestionCell`.
    static let questionCell: Rswift.ReuseIdentifier<QuestionCell> = Rswift.ReuseIdentifier(identifier: "QuestionCell")
    /// Reuse identifier `SearchHeaderView`.
    static let searchHeaderView: Rswift.ReuseIdentifier<SearchHeaderView> = Rswift.ReuseIdentifier(identifier: "SearchHeaderView")
    /// Reuse identifier `SearchHotCell`.
    static let searchHotCell: Rswift.ReuseIdentifier<SearchHotCell> = Rswift.ReuseIdentifier(identifier: "SearchHotCell")
    /// Reuse identifier `SettingCell`.
    static let settingCell: Rswift.ReuseIdentifier<SettingCell> = Rswift.ReuseIdentifier(identifier: "SettingCell")
    /// Reuse identifier `TeacherDetailCommentCell`.
    static let teacherDetailCommentCell: Rswift.ReuseIdentifier<TeacherDetailCommentCell> = Rswift.ReuseIdentifier(identifier: "TeacherDetailCommentCell")
    /// Reuse identifier `TeacherDetailDescriptionCell`.
    static let teacherDetailDescriptionCell: Rswift.ReuseIdentifier<TeacherDetailDescriptionCell> = Rswift.ReuseIdentifier(identifier: "TeacherDetailDescriptionCell")
    /// Reuse identifier `TeacherDetailInfoCell`.
    static let teacherDetailInfoCell: Rswift.ReuseIdentifier<TeacherDetailInfoCell> = Rswift.ReuseIdentifier(identifier: "TeacherDetailInfoCell")
    /// Reuse identifier `TeacherDetailSegmentedCell`.
    static let teacherDetailSegmentedCell: Rswift.ReuseIdentifier<TeacherDetailSegmentedCell> = Rswift.ReuseIdentifier(identifier: "TeacherDetailSegmentedCell")
    /// Reuse identifier `TeacherHomeCell`.
    static let teacherHomeCell: Rswift.ReuseIdentifier<TeacherHomeCell> = Rswift.ReuseIdentifier(identifier: "TeacherHomeCell")
    /// Reuse identifier `UserInfoCell`.
    static let userInfoCell: Rswift.ReuseIdentifier<UserInfoCell> = Rswift.ReuseIdentifier(identifier: "UserInfoCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AboutViewController.validate()
      try _CommentViewController.validate()
      try _CouponCell.validate()
      try _CourseDetailCoverCell.validate()
      try _CourseDetailDescptionCell.validate()
      try _CourseDetailTeacherCell.validate()
      try _CourseDetailViewController.validate()
      try _CourseSbscribeAlertViewController.validate()
      try _FeedbackViewController.validate()
      try _FindPwdViewController.validate()
      try _MineTableCell.validate()
      try _PaymentCouponCell.validate()
      try _PaymentPayTypeCell.validate()
      try _PaymentViewController.validate()
      try _PlayerViewController.validate()
      try _QuestionCell.validate()
      try _RegisterViewController.validate()
      try _SearchViewController.validate()
      try _SelectCourseViewController.validate()
      try _SettingCell.validate()
      try _SettingViewController.validate()
      try _TeacherDetailCommentCell.validate()
      try _TeacherDetailInfoCell.validate()
      try _TeacherHomeCell.validate()
      try _UserInfoCell.validate()
      try _ValidateCodeLoginViewController.validate()
    }

    struct _AboutViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AboutViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'AboutViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AccountSafeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountSafeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ActivityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ActivityCell

      let bundle = R.hostingBundle
      let identifier = "ActivityCell"
      let name = "ActivityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityCell
      }

      fileprivate init() {}
    }

    struct _ActivityListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ActivityListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AreaSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AreaSettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CommentViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommentViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'CommentViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close2' is used in nib 'CommentViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_big0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_big0' is used in nib 'CommentViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CouponCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CouponCell

      let bundle = R.hostingBundle
      let identifier = "CouponCell"
      let name = "CouponCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_coupon02", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_coupon02' is used in nib 'CouponCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button01' is used in nib 'CouponCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button02", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button02' is used in nib 'CouponCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CouponListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CouponListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CourseDetailCoverCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseDetailCoverCell

      let bundle = R.hostingBundle
      let identifier = "CourseDetailCoverCell"
      let name = "CourseDetailCoverCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailCoverCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailCoverCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_clock2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_clock2' is used in nib 'CourseDetailCoverCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CourseDetailDescptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseDetailDescptionCell

      let bundle = R.hostingBundle
      let identifier = "CourseDetailDescptionCell"
      let name = "CourseDetailDescptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailDescptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailDescptionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_see", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_see' is used in nib 'CourseDetailDescptionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button_see2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_see2' is used in nib 'CourseDetailDescptionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CourseDetailTeacherCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseDetailTeacherCell

      let bundle = R.hostingBundle
      let identifier = "CourseDetailTeacherCell"
      let name = "CourseDetailTeacherCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailTeacherCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailTeacherCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_date_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_date_right' is used in nib 'CourseDetailTeacherCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CourseDetailUnitCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CourseDetailUnitCell

      let bundle = R.hostingBundle
      let identifier = "CourseDetailUnitCell"
      let name = "CourseDetailUnitCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailUnitCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailUnitCell
      }

      fileprivate init() {}
    }

    struct _CourseDetailUnitDescriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CourseDetailUnitDescriptionCell

      let bundle = R.hostingBundle
      let identifier = "CourseDetailUnitDescriptionCell"
      let name = "CourseDetailUnitDescriptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailUnitDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailUnitDescriptionCell
      }

      fileprivate init() {}
    }

    struct _CourseDetailViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CourseDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'CourseDetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_love", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_love' is used in nib 'CourseDetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_loved", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_loved' is used in nib 'CourseDetailViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CoursePlayViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CoursePlayViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CourseSbscribeAlertViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CourseSbscribeAlertViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'CourseSbscribeAlertViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in nib 'CourseSbscribeAlertViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sel' is used in nib 'CourseSbscribeAlertViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CourseUnitViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CourseUnitViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CustomerServiceViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomerServiceViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EditUserinfoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditUserinfoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FeedbackViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FeedbackViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'FeedbackViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FindPwdViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FindPwdViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'FindPwdViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_paixu3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_paixu3' is used in nib 'FindPwdViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MessageCell

      let bundle = R.hostingBundle
      let identifier = "MessageCell"
      let name = "MessageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageCell
      }

      fileprivate init() {}
    }

    struct _MessageListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MineTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MineTableCell

      let bundle = R.hostingBundle
      let identifier = "MineTableCell"
      let name = "MineTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_more_my", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_more_my' is used in nib 'MineTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_my01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_my01' is used in nib 'MineTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyCollectionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCollectionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PaymentCouponCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PaymentCouponCell

      let bundle = R.hostingBundle
      let identifier = "PaymentCouponCell"
      let name = "PaymentCouponCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentCouponCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentCouponCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_date_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_date_right' is used in nib 'PaymentCouponCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PaymentPayTypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PaymentPayTypeCell

      let bundle = R.hostingBundle
      let identifier = "PaymentPayTypeCell"
      let name = "PaymentPayTypeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentPayTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentPayTypeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_pay1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pay1' is used in nib 'PaymentPayTypeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sel2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sel2' is used in nib 'PaymentPayTypeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PaymentPriceDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PaymentPriceDetailCell

      let bundle = R.hostingBundle
      let identifier = "PaymentPriceDetailCell"
      let name = "PaymentPriceDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentPriceDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentPriceDetailCell
      }

      fileprivate init() {}
    }

    struct _PaymentViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'PaymentViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlayerViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlayerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_back2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_back2' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_play' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_share01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_share01' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_share02", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_share02' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_share03", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_share03' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_small2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_small2' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tui", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tui' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tui2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tui2' is used in nib 'PlayerViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuestionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuestionCell

      let bundle = R.hostingBundle
      let identifier = "QuestionCell"
      let name = "QuestionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_grade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_grade' is used in nib 'QuestionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RegisterViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RegisterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "head_student_man", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_student_man' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "head_teacher_man", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_teacher_man' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_grade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_grade' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_paixu3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_paixu3' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sel' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_signsel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_signsel' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SearchHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchHeaderView

      let bundle = R.hostingBundle
      let identifier = "SearchHeaderView"
      let name = "SearchHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHeaderView
      }

      fileprivate init() {}
    }

    struct _SearchHotCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchHotCell

      let bundle = R.hostingBundle
      let identifier = "SearchHotCell"
      let name = "SearchHotCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHotCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHotCell
      }

      fileprivate init() {}
    }

    struct _SearchViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_search' is used in nib 'SearchViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_search' is used in nib 'SearchViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SelectCourseViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectCourseViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'SelectCourseViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sel2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sel2' is used in nib 'SelectCourseViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SettingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingCell

      let bundle = R.hostingBundle
      let identifier = "SettingCell"
      let name = "SettingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_more_my", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_more_my' is used in nib 'SettingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SettingViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_01' is used in nib 'SettingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TeacherContentViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TeacherContentViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TeacherDetailCommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TeacherDetailCommentCell

      let bundle = R.hostingBundle
      let identifier = "TeacherDetailCommentCell"
      let name = "TeacherDetailCommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailCommentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "start1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start1' is used in nib 'TeacherDetailCommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TeacherDetailDescriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TeacherDetailDescriptionCell

      let bundle = R.hostingBundle
      let identifier = "TeacherDetailDescriptionCell"
      let name = "TeacherDetailDescriptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailDescriptionCell
      }

      fileprivate init() {}
    }

    struct _TeacherDetailInfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TeacherDetailInfoCell

      let bundle = R.hostingBundle
      let identifier = "TeacherDetailInfoCell"
      let name = "TeacherDetailInfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailInfoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_guanzhu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guanzhu' is used in nib 'TeacherDetailInfoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_renzheng", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_renzheng' is used in nib 'TeacherDetailInfoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start1' is used in nib 'TeacherDetailInfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TeacherDetailSegmentedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TeacherDetailSegmentedCell

      let bundle = R.hostingBundle
      let identifier = "TeacherDetailSegmentedCell"
      let name = "TeacherDetailSegmentedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherDetailSegmentedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherDetailSegmentedCell
      }

      fileprivate init() {}
    }

    struct _TeacherHomeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TeacherHomeCell

      let bundle = R.hostingBundle
      let identifier = "TeacherHomeCell"
      let name = "TeacherHomeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeacherHomeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeacherHomeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_guanzhu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guanzhu' is used in nib 'TeacherHomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guanzhu2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guanzhu2' is used in nib 'TeacherHomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start1' is used in nib 'TeacherHomeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserInfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserInfoCell

      let bundle = R.hostingBundle
      let identifier = "UserInfoCell"
      let name = "UserInfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "head_student_man", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_student_man' is used in nib 'UserInfoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_more_my", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_more_my' is used in nib 'UserInfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ValidateCodeLoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ValidateCodeLoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_paixu3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_paixu3' is used in nib 'ValidateCodeLoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let homeContentViewController = StoryboardViewControllerResource<HomeContentViewController>(identifier: "HomeContentViewController")
      let name = "Main"

      func homeContentViewController(_: Void = ()) -> HomeContentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeContentViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_menu01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu02", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu02' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu03", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu03' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu04", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu04' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tag_NO1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tag_NO1' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().homeContentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeContentViewController' could not be loaded from storyboard 'Main' as 'HomeContentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
